use std::{marker::PhantomData, iter};

use group::{ff::Field, prime::PrimeCurve};
use halo2_proofs::{
    circuit::{AssignedCell, Chip, Layouter, Region, SimpleFloorPlanner, Value},
    plonk::{Advice, Any, Circuit, Column, ConstraintSystem, Error, Fixed, Instance, Selector},
    poly::Rotation, // dev::metadata::Column,
};

use crate::{
  circuit::{
    cs::*,
    num::*,
    bool::*,
  },
  ff_uint::{Num, PrimeField},
};

// ANCHOR: instructions
trait NumericInstructions<F: Field>: Chip<F> {
    /// Variable representing a number.
    type Num;

    /// Loads a number into the circuit as a private input.
    fn load_private(&self, layouter: impl Layouter<F>, a: Value<F>) -> Result<Self::Num, Error>;

    /// Loads a number into the circuit as a fixed constant.
    fn load_constant(&self, layouter: impl Layouter<F>, constant: F) -> Result<Self::Num, Error>;

    /// Returns `c = a * b`.
    fn mul(
        &self,
        layouter: impl Layouter<F>,
        a: Self::Num,
        b: Self::Num,
    ) -> Result<Self::Num, Error>;

    /// Exposes a number as a public input to the circuit.
    fn expose_public(
        &self,
        layouter: impl Layouter<F>,
        num: Self::Num,
        row: usize,
    ) -> Result<(), Error>;
}
// ANCHOR_END: instructions

// ANCHOR: chip
/// The chip that will implement our instructions! Chips store their own
/// config, as well as type markers if necessary.
struct FieldChip<F: Field> {
    config: FieldConfig,
    _marker: PhantomData<F>,
}
// ANCHOR_END: chip

// ANCHOR: chip-config
/// Chip state is stored in a config struct. This is generated by the chip
/// during configuration, and then stored inside the chip.
#[derive(Clone, Debug)]
struct FieldConfig {
    /// For this chip, we will use two advice columns to implement our instructions.
    /// These are also the columns through which we communicate with other parts of
    /// the circuit.
    advice: [Column<Advice>; 2],

    /// This is the public input (instance) column.
    instance: Column<Instance>,

    // We need a selector to enable the multiplication gate, so that we aren't placing
    // any constraints on cells where `NumericInstructions::mul` is not being used.
    // This is important when building larger circuits, where columns are used by
    // multiple sets of instructions.
    s_mul: Selector,
}

impl<F: Field> FieldChip<F> {
    fn construct(config: <Self as Chip<F>>::Config) -> Self {
        Self {
            config,
            _marker: PhantomData,
        }
    }

    fn configure(
        meta: &mut ConstraintSystem<F>,
        advice: [Column<Advice>; 2],
        instance: Column<Instance>,
        constant: Column<Fixed>,
    ) -> <Self as Chip<F>>::Config {
        meta.enable_equality(instance);
        meta.enable_constant(constant);
        for column in &advice {
            meta.enable_equality(*column);
        }
        let s_mul = meta.selector();

        // Define our multiplication gate!
        meta.create_gate("mul", |meta| {
            // To implement multiplication, we need three advice cells and a selector
            // cell. We arrange them like so:
            //
            // | a0  | a1  | s_mul |
            // |-----|-----|-------|
            // | lhs | rhs | s_mul |
            // | out |     |       |
            //
            // Gates may refer to any relative offsets we want, but each distinct
            // offset adds a cost to the proof. The most common offsets are 0 (the
            // current row), 1 (the next row), and -1 (the previous row), for which
            // `Rotation` has specific constructors.
            let lhs = meta.query_advice(advice[0], Rotation::cur());
            let rhs = meta.query_advice(advice[1], Rotation::cur());
            let out = meta.query_advice(advice[0], Rotation::next());
            let s_mul = meta.query_selector(s_mul);

            // Finally, we return the polynomial expressions that constrain this gate.
            // For our multiplication gate, we only need a single polynomial constraint.
            //
            // The polynomial expressions returned from `create_gate` will be
            // constrained by the proving system to equal zero. Our expression
            // has the following properties:
            // - When s_mul = 0, any value is allowed in lhs, rhs, and out.
            // - When s_mul != 0, this constrains lhs * rhs = out.
            vec![s_mul * (lhs * rhs - out)]
        });

        FieldConfig {
            advice,
            instance,
            s_mul,
        }
    }
}
// ANCHOR_END: chip-config

// ANCHOR: chip-impl
impl<F: Field> Chip<F> for FieldChip<F> {
    type Config = FieldConfig;
    type Loaded = ();

    fn config(&self) -> &Self::Config {
        &self.config
    }

    fn loaded(&self) -> &Self::Loaded {
        &()
    }
}
// ANCHOR_END: chip-impl

// ANCHOR: instructions-impl
/// A variable representing a number.
#[derive(Clone)]
struct Number<F: Field>(AssignedCell<F, F>);

impl<F: Field> NumericInstructions<F> for FieldChip<F> {
    type Num = Number<F>;

    fn load_private(
        &self,
        mut layouter: impl Layouter<F>,
        value: Value<F>,
    ) -> Result<Self::Num, Error> {
        let config = self.config();

        layouter.assign_region(
            || "load private",
            |mut region| {
                region
                    .assign_advice(|| "private input", config.advice[0], 0, || value)
                    .map(Number)
            },
        )
    }

    fn load_constant(
        &self,
        mut layouter: impl Layouter<F>,
        constant: F,
    ) -> Result<Self::Num, Error> {
        let config = self.config();

        layouter.assign_region(
            || "load constant",
            |mut region| {
                region
                    .assign_advice_from_constant(|| "constant value", config.advice[0], 0, constant)
                    .map(Number)
            },
        )
    }

    fn mul(
        &self,
        mut layouter: impl Layouter<F>,
        a: Self::Num,
        b: Self::Num,
    ) -> Result<Self::Num, Error> {
        let config = self.config();

        layouter.assign_region(
            || "mul",
            |mut region: Region<'_, F>| {
                // We only want to use a single multiplication gate in this region,
                // so we enable it at region offset 0; this means it will constrain
                // cells at offsets 0 and 1.
                config.s_mul.enable(&mut region, 0)?;

                // The inputs we've been given could be located anywhere in the circuit,
                // but we can only rely on relative offsets inside this region. So we
                // assign new cells inside the region and constrain them to have the
                // same values as the inputs.
                a.0.copy_advice(|| "lhs", &mut region, config.advice[0], 0)?;
                b.0.copy_advice(|| "rhs", &mut region, config.advice[1], 0)?;

                // Now we can assign the multiplication result, which is to be assigned
                // into the output position.
                let value = a.0.value().copied() * b.0.value();

                // Finally, we do the assignment to the output, returning a
                // variable to be used in another part of the circuit.
                region
                    .assign_advice(|| "lhs * rhs", config.advice[0], 1, || value)
                    .map(Number)
            },
        )
    }

    fn expose_public(
        &self,
        mut layouter: impl Layouter<F>,
        num: Self::Num,
        row: usize,
    ) -> Result<(), Error> {
        let config = self.config();

        layouter.constrain_instance(num.0.cell(), config.instance, row)
    }
}
// ANCHOR_END: instructions-impl

// ANCHOR: circuit
/// The full circuit implementation.
///
/// In this struct we store the private input variables. We use `Option<F>` because
/// they won't have any value during key generation. During proving, if any of these
/// were `None` we would get an error.
#[derive(Default)]
struct MyCircuit<F: Field> {
    constant: F,
    a: Value<F>,
    b: Value<F>,
}

impl<F: Field> Circuit<F> for MyCircuit<F> {
    // Since we are using a single chip for everything, we can just reuse its config.
    type Config = FieldConfig;
    type FloorPlanner = SimpleFloorPlanner;

    fn without_witnesses(&self) -> Self {
        Self::default()
    }

    fn configure(meta: &mut ConstraintSystem<F>) -> Self::Config {
        // We create the two advice columns that FieldChip uses for I/O.
        let advice = [meta.advice_column(), meta.advice_column()];

        // We also need an instance column to store public inputs.
        let instance = meta.instance_column();

        // Create a fixed column to load constants.
        let constant = meta.fixed_column();

        FieldChip::configure(meta, advice, instance, constant)
    }

    fn synthesize(
        &self,
        config: Self::Config,
        mut layouter: impl Layouter<F>,
    ) -> Result<(), Error> {
        let field_chip = FieldChip::<F>::construct(config);

        // Load our private values into the circuit.
        let a = field_chip.load_private(layouter.namespace(|| "load a"), self.a)?;
        let b = field_chip.load_private(layouter.namespace(|| "load b"), self.b)?;

        // Load the constant factor into the circuit.
        let constant =
            field_chip.load_constant(layouter.namespace(|| "load constant"), self.constant)?;

        // We only have access to plain multiplication.
        // We could implement our circuit as:
        //     asq  = a*a
        //     bsq  = b*b
        //     absq = asq*bsq
        //     c    = constant*asq*bsq
        //
        // but it's more efficient to implement it as:
        //     ab   = a*b
        //     absq = ab^2
        //     c    = constant*absq
        let ab = field_chip.mul(layouter.namespace(|| "a * b"), a, b)?;
        let absq = field_chip.mul(layouter.namespace(|| "ab * ab"), ab.clone(), ab)?;
        let c = field_chip.mul(layouter.namespace(|| "constant * absq"), constant, absq)?;

        // Expose the result as a public input to the circuit.
        field_chip.expose_public(layouter.namespace(|| "expose c"), c, 0)
    }
}
// ANCHOR_END: circuit

#[test]
fn test_plonk_example() {
    use halo2_proofs::{dev::MockProver, pasta::Fp};

    // ANCHOR: test-circuit
    // The number of rows in our circuit cannot exceed 2^k. Since our example
    // circuit is very small, we can pick a very small value here.
    let k = 4;

    // Prepare the private and public inputs to the circuit!
    let constant = Fp::from(7);
    let a = Fp::from(2);
    let b = Fp::from(3);
    let c = constant * a.square() * b.square();

    // Instantiate the circuit with the private inputs.
    let circuit = MyCircuit {
        constant,
        a: Value::known(a),
        b: Value::known(b),
    };

    // Arrange the public input. We expose the multiplication result in row 0
    // of the instance column, so we position it there in our public inputs.
    let mut public_inputs = vec![c];

    // Given the correct public input, our circuit will verify.
    let prover = MockProver::run(k, &circuit, vec![public_inputs.clone()]).unwrap();
    assert_eq!(prover.verify(), Ok(()));

    // If we try some other public input, the proof will fail!
    public_inputs[0] += Fp::one();
    let prover = MockProver::run(k, &circuit, vec![public_inputs]).unwrap();
    assert!(prover.verify().is_err());
    // ANCHOR_END: test-circuit
}

#[derive(Clone, Debug)]
/// a*x + b*y + c*z + d*x*y + e == 0
pub struct FawkesGateConfig<F: Field + PrimeField> {
    x: Column<Advice>,
    y: Column<Advice>,
    z: Column<Advice>,
    a: Column<Fixed>,
    b: Column<Fixed>,
    c: Column<Fixed>,
    d: Column<Fixed>,
    e: Column<Fixed>,
    /// Selector that enables/disables the equation for a specific row
    sel: Selector,
    _marker: PhantomData<F>,
}

pub struct FawkesGateLayout<F: Field + PrimeField> {
    x: AssignedCell<F, F>,
    y: AssignedCell<F, F>,
    z: AssignedCell<F, F>,
}

impl<F: Field + PrimeField> FawkesGateConfig<F> {
    /// Allocate the columns this gate will be using, and describe the
    /// constraint equation it will enforce. (Without knowing the cell values
    /// or the rows that we will occupy yet.)
    fn config(cs: &mut ConstraintSystem<F>) -> Self {
        // We allocate the columns over which we will be defining our gate. We
        // also enable equality constraints for each of the three advice gates.
        let res = {
            let make_advice = &mut || {
                let c = cs.advice_column();
                cs.enable_equality(c);
                c
            };

            Self {
                x: make_advice(),
                y: make_advice(),
                z: make_advice(),
                a: cs.fixed_column(),
                b: cs.fixed_column(),
                c: cs.fixed_column(),
                d: cs.fixed_column(),
                e: cs.fixed_column(),
                sel: cs.selector(),
                _marker: PhantomData,
            }
        };

        // This call describes the shape of our gate over matrix cells. Here,
        // we know neither the concrete advice/instance/selector values, nor
        // the row in which the gate will be placed yet (such things are
        // determined at synthesis time).
        cs.create_gate("standard_gate", |virtual_cells| {
            // Query the cells that are at the intersection of the current
            // (virtual) row and each of the columns that we just allocated.
            let sel = virtual_cells.query_selector(res.sel);
            let x = virtual_cells.query_advice(res.x, Rotation::cur());
            let y = virtual_cells.query_advice(res.y, Rotation::cur());
            let z = virtual_cells.query_advice(res.z, Rotation::cur());
            let a = virtual_cells.query_fixed(res.a, Rotation::cur());
            let b = virtual_cells.query_fixed(res.b, Rotation::cur());
            let c = virtual_cells.query_fixed(res.c, Rotation::cur());
            let d = virtual_cells.query_fixed(res.d, Rotation::cur());
            let e = virtual_cells.query_fixed(res.e, Rotation::cur());

            // Produce the constraint for the current row. We require that the
            // expression given in the brackets equals 0.
            vec![sel * (a * x.clone() + b * y.clone() + c * z + d * x * y + e)]
        });

        res
    }

    // TODO: ensure this function adds all the necessary copy constraints (when
    // the same advice value is reused) to make sure that adversarial prover
    // can't cheat.
    fn synthesize(
        self,
        mut layouter: impl Layouter<F>,
        g: &Gate<F>
    ) -> Result<(), Error> {
        layouter.assign_region(|| format!("synthesize {:?}", g), |mut region| {
            // TODO: Figure out what is this offset value
            let offset = 0;

            // Enable constraint
            self.sel.enable(&mut region, offset);

            // Assign the advice values in the current row. Save the
            region.assign_advice(|| format!("x = {:?}", g.x), self.x, offset, || Value { inner: g.x })?;
            region.assign_advice(|| format!("y = {:?}", g.y), self.y, offset, || Value { inner: g.y })?;
            region.assign_advice(|| format!("z = {:?}", g.z), self.z, offset, || Value { inner: g.z })?;

            // Assign the fixed values in the current row
            region.assign_fixed(|| format!("a = {:?}", g.a), self.a, offset, g.a)?;
            region.assign_fixed(|| format!("b = {:?}", g.b), self.b, offset, g.b)?;
            region.assign_fixed(|| format!("c = {:?}", g.c), self.c, offset, g.c)?;
            region.assign_fixed(|| format!("d = {:?}", g.d), self.d, offset, g.d)?;
            region.assign_fixed(|| format!("e = {:?}", g.e), self.e, offset, g.e)?;

            Ok(())
        })
    }
}

impl<F: Field + PrimeField> Circuit<F> for BuildCS<F> {
    type Config = FawkesGateConfig<F>;
    type FloorPlanner = SimpleFloorPlanner;

    fn without_witnesses(&self) -> Self {
        BuildCS {
            values: self.values.iter().map(|_| None).collect(),
            gates: self.gates.clone(),
            tracking: self.tracking,
            public: self.public.clone(),
        }
    }

    fn configure(meta: &mut ConstraintSystem<F>) -> Self::Config {
        panic!()
    }

    fn synthesize(
        &self, config: Self::Config,
        layouter: impl Layouter<F>) -> Result<(), Error> {
        panic!()
    }
}
